plugins {
  id 'java-library'
  id 'maven-publish'
  id 'signing'
  id "com.diffplug.spotless" version "6.25.0"
}

group = 'cloud.eppo'
version = '3.4.0'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
  withJavadocJar()
  withSourcesJar()
}

dependencies {
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
  implementation 'com.github.zafarkhaja:java-semver:0.10.2'
  implementation "com.squareup.okhttp3:okhttp:4.12.0"

  // For LRU and expiring maps
  implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'

  // For UFC DTOs
  implementation 'commons-codec:commons-codec:1.17.1'
  implementation 'org.slf4j:slf4j-api:2.0.16'
  testImplementation 'org.slf4j:slf4j-simple:2.0.16'
  testImplementation platform('org.junit:junit-bom:5.10.3')
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testImplementation 'org.skyscreamer:jsonassert:1.5.3'
  testImplementation 'commons-io:commons-io:2.17.0'
  testImplementation 'com.google.truth:truth:1.4.4'
  testImplementation ('org.mockito:mockito-core:4.11.0') {
    exclude group: 'net.bytebuddy', module: 'byte-buddy' // mockito 4's version doesn't work with Java 21
  }
  testImplementation 'net.bytebuddy:byte-buddy:1.15.1' // Use the latest available version
  testImplementation 'org.mockito:mockito-inline:4.11.0'
}

test {
  useJUnitPlatform()
  testLogging {
    events "started", "passed", "skipped", "failed"
    exceptionFormat "full"
    showExceptions true
    showCauses true
    showStackTraces true
  }
}

spotless {
  ratchetFrom 'origin/main'

  format 'misc', {
    // define the files to apply `misc` to
    target '*.gradle', '.gitattributes', '.gitignore'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    indentWithSpaces(2) // or spaces. Takes an integer argument if you don't like 4
    endWithNewline()
  }
  java {
    // apply a specific flavor of google-java-format
    googleJavaFormat('1.7')
    // fix formatting of type annotations
    formatAnnotations()
  }
}

tasks.register('testJar', Jar) {
  archiveClassifier.set('tests')
  from sourceSets.test.output
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = 'sdk-common-jvm'
      from components.java
      artifact testJar // Include the test-jar in the published artifacts
      versionMapping {
        usage('java-api') {
          fromResolutionOf('runtimeClasspath')
        }
        usage('java-runtime') {
          fromResolutionResult()
        }
      }
      pom {
        name = 'Eppo JVM SDK shared library'
        description = 'Eppo SDK for JVM shared library'
        url = 'https://github.com/Eppo-exp/sdk-common-jvm'
        licenses {
          license {
            name = 'MIT License'
            url = 'http://www.opensource.org/licenses/mit-license.php'
          }
        }
        developers {
          developer {
            name = 'Eppo'
            email = 'https://geteppo.com'
          }
        }
        scm {
          connection = 'scm:git:git://example.com/my-library.git'
          developerConnection = 'scm:git:ssh://example.com/my-library.git'
          url = 'http://example.com/my-library/'
        }
      }
    }
  }
  repositories {
    maven {
      def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      credentials {
        username = project.properties.containsKey("ossrhUsername") ? project.properties["ossrhUsername"] : ""
        password = project.properties.containsKey("ossrhPassword") ? project.properties["ossrhPassword"] : ""
      }
    }
  }
}

// Custom task to ensure we can conditionally publish either a release or snapshot artifact
// based on a command line switch. See github workflow files for more details on usage.
tasks.register('checkVersion') {
  doLast {
    if (!project.hasProperty('release') && !project.hasProperty('snapshot')) {
      throw new GradleException("You must specify either -Prelease or -Psnapshot")
    }
    if (project.hasProperty('release') && project.version.endsWith('SNAPSHOT')) {
      throw new GradleException("You cannot specify -Prelease with a SNAPSHOT version")
    }
    if (project.hasProperty('snapshot') && !project.version.endsWith('SNAPSHOT')) {
      throw new GradleException("You cannot specify -Psnapshot with a non-SNAPSHOT version")
    }
    project.ext.shouldPublish = true
  }
}

// Ensure checkVersion runs before publishing
tasks.named('publish').configure {
  dependsOn checkVersion
}

// Conditionally enable or disable publishing tasks
tasks.withType(PublishToMavenRepository).configureEach {
  onlyIf {
    project.ext.has('shouldPublish') && project.ext.shouldPublish
  }
}

if (!project.gradle.startParameter.taskNames.contains('publishToMavenLocal')) {
  signing {
    sign publishing.publications.mavenJava
    if (System.env['CI']) {
      useInMemoryPgpKeys(System.env.GPG_PRIVATE_KEY, System.env.GPG_PASSPHRASE)
    }
  }
}

javadoc {
  failOnError = false
  options.addStringOption('Xdoclint:none', '-quiet')
  options.addBooleanOption('failOnError', false)
  if (JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }
}
